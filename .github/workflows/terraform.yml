name: 'Terraform'

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  AWS_REGION: ap-northeast-2  # 기본 AWS 지역 설정

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.4.6

    - name: Terraform Init
      run: terraform init
      working-directory: ./environments/prod

    - name: Terraform Plan (VPC & Subnets)
      run: terraform plan -input=false -target=module.vpc -target=module.subnets -out=tfplan-target -no-color
      working-directory: ./environments/prod

    - name: Terraform Apply (VPC & Subnets)
      id: apply-target
      run: terraform apply -input=false -auto-approve tfplan-target
      working-directory: ./environments/prod

    - name: Terraform Plan (Remaining Resources)
      run: terraform plan -input=false -out=tfplan -no-color
      working-directory: ./environments/prod

    - name: Terraform Apply (Remaining Resources)
      id: apply
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ./environments/prod

    - name: Terraform Destroy on Failure
      if: ${{ failure() || steps.apply.outcome == 'failure' }}
      run: terraform destroy -auto-approve -lock=false
      working-directory: ./environments/prod
